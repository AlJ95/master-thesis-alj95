{
    "test_cases": [
      {
        "input": "Is this Dockerfile instruction valid? 'FROM ubuntu:latest AS build-stage'",
        "expected_output": "valid",
        "reason": "This is a correct way to name a build stage in a multi-stage Dockerfile using the AS keyword. The syntax is proper and follows Docker best practices for creating named build stages.",
        "retrieval_context": [
          "Docker best practice: Use multi-stage builds to reduce image size. Multi-stage builds let you create cleaner separation between build-time dependencies and runtime dependencies, ensuring the final image only contains what's needed to run your application. You can use the 'AS' keyword to name your stages and reference them later. Example: 'FROM node:14 AS build' followed by 'FROM nginx:alpine' with 'COPY --from=build /app/build /usr/share/nginx/html'."
        ],
        "class": "valid"
      },
      {
        "input": "Is this Dockerfile instruction valid? 'FROM node:14.17.0'",
        "expected_output": "valid",
        "reason": "This correctly specifies a pinned version of Node.js as the base image, which is recommended for reproducible builds. Using specific version tags rather than 'latest' ensures consistent builds.",
        "retrieval_context": [
          "Docker best practice: Pin base image versions to specific tags for reproducible builds. Using 'FROM node:14.17.0' instead of 'FROM node:latest' ensures your builds are consistent and prevents unexpected changes when upstream images are updated. This makes builds reproducible and helps prevent future build failures or unexpected behavior in production."
        ],
        "class": "valid"
      },
      {
        "input": "Is this Dockerfile instruction valid? 'ENV API_KEY=abc123xyz'",
        "expected_output": "invalid",
        "reason": "This instruction exposes the API key in the image history, creating a security risk. Secrets should never be stored directly in Dockerfiles. Use runtime environment variables or dedicated secret management tools instead.",
        "retrieval_context": [
          "Docker anti-pattern: Avoid storing secrets or credentials in Dockerfiles. Never include API keys, passwords, or tokens directly in your Dockerfile with ENV or ARG instructions. These values are stored in the image history and can be exposed. Instead, use runtime environment variables, Docker secrets, or dedicated secret management tools like HashiCorp Vault or AWS Secrets Manager."
        ],
        "class": "invalid"
      },
      {
        "input": "Is this GitHub Actions workflow syntax valid? 'uses: actions/checkout@main'",
        "expected_output": "invalid",
        "reason": "Using '@main' references a branch name which can change over time, leading to unpredictable behavior. For security and reproducibility, you should use the full SHA commit hash of the action instead.",
        "retrieval_context": [
          "GitHub Actions best practice: Always specify the version of actions you use with SHA commits rather than branch names or version tags. Using '@main' or '@v2' can lead to unexpected behavior if the action is updated. Example: 'uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675' ensures that you always use the exact same version of the action, improving reproducibility and security."
        ],
        "class": "invalid"
      },
      {
        "input": "Is this GitHub Actions workflow syntax valid? 'env: DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}'",
        "expected_output": "valid",
        "reason": "This correctly uses GitHub's secrets feature to access sensitive information without hardcoding it in the workflow file. This follows security best practices for handling credentials.",
        "retrieval_context": [
          "GitHub Actions anti-pattern: Never hardcode secrets in workflow files. Secrets committed to your repository can be exposed, especially in public repositories. Instead, use GitHub's built-in secrets feature: 'env: API_TOKEN: ${{ secrets.API_TOKEN }}'. This keeps sensitive information secure and allows for easier rotation of credentials."
        ],
        "class": "valid"
      },
      {
        "input": "Is this Dockerfile instruction valid? 'USER root'",
        "expected_output": "invalid",
        "reason": "Running containers as the root user creates unnecessary security risks. Create a dedicated user with minimal permissions instead, following the principle of least privilege.",
        "retrieval_context": [
          "Docker anti-pattern: Never use the 'root' user to run applications in containers. Running as root creates unnecessary security risks. Instead, create a dedicated user with minimal permissions. Example: 'RUN useradd -r -u 1001 -g appuser appuser' followed by 'USER appuser'. This follows the principle of least privilege and helps prevent privilege escalation attacks if the container is compromised."
        ],
        "class": "invalid"
      },
      {
        "input": "Is this GitHub Actions workflow syntax valid? 'permissions: contents: read'",
        "expected_output": "valid",
        "reason": "This correctly restricts the workflow permissions to only read repository contents, following the principle of least privilege. This reduces potential impact if the workflow is compromised.",
        "retrieval_context": [
          "GitHub Actions best practice: Set appropriate permissions for your workflows using the 'permissions' keyword. By default, workflows have read/write permissions to all scopes, which violates the principle of least privilege. Example: 'permissions: contents: read' restricts the workflow to only read repository contents, reducing the potential damage if the workflow is compromised."
        ],
        "class": "valid"
      },
      {
        "input": "Is this GitHub Actions configuration valid? 'runs-on: self-hosted' in a public repository",
        "expected_output": "invalid",
        "reason": "Using self-hosted runners in public repositories is a security risk, as public repositories can submit pull requests that could execute malicious code on your self-hosted runners. Use GitHub-hosted runners for public repositories.",
        "retrieval_context": [
          "GitHub Actions anti-pattern: Avoid using self-hosted runners for public repositories or repositories with untrusted code. Public repositories can submit pull requests that execute code on your self-hosted runners, potentially compromising your infrastructure. Use GitHub-hosted runners for public repositories or implement strict controls on which workflows can run on self-hosted runners."
        ],
        "class": "invalid"
      },
      {
        "input": "Is this Dockerfile RUN instruction valid? 'RUN apt-get update && apt-get install -y curl git nginx vim && rm -rf /var/lib/apt/lists/*'",
        "expected_output": "valid",
        "reason": "This instruction correctly chains commands with && and cleans up apt caches to reduce image size. For better readability and maintenance, consider formatting multi-line arguments alphabetically.",
        "retrieval_context": [
          "Docker best practice: Sort multi-line arguments alphabetically in RUN instructions. This helps prevent duplicate packages and makes lists easier to update. Example: 'RUN apt-get update && apt-get install -y \\\\\\n  curl \\\\\\n  git \\\\\\n  nginx \\\\\\n  vim \\\\\\n  && rm -rf /var/lib/apt/lists/*'. Adding a space before backslash improves readability."
        ],
        "class": "valid"
      },
      {
        "input": "Is this GitHub Actions workflow step valid? 'name: Validate YAML, run: yamllint .'",
        "expected_output": "valid",
        "reason": "This step correctly runs a YAML linter to validate all YAML files in the repository. This helps prevent syntax errors and ensures consistent formatting across your codebase.",
        "retrieval_context": [
          "GitHub Actions best practice: Validate YAML files in your repository using linters. Create a workflow that runs for every pull request: 'name: Validate-YAML, on: [pull_request], jobs: validate-yaml: runs-on: ubuntu-latest, steps: - uses: actions/checkout@v3, - name: Validate YAML, run: yamllint .'. This helps prevent syntax errors and enforces consistent formatting."
        ],
        "class": "valid"
      }
    ]
} 